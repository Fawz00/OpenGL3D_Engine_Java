#version 330 core

precision highp float;

#define USE_SKYBOX
#define USE_CLOUD

uniform samplerCube TEXTURE_SKYNIGHT;
uniform sampler2D TEXTURE_NOISE;
uniform sampler2D TEXTURE_TEMPCOLOR;

uniform float TIME;
uniform vec3 SUN_DIR;
uniform mat4 SHADOW_ROTATION_MATRIX;

in vec2 uv;
in vec4 position;
in vec4 vPos;

out vec4 FragColor;

#define rayleighCoeff vec3(0.5, 1.0, 1.8) * 1e-5
#define mieCoeff vec3(1e-6)
#define pi 3.14159265358979
#define d0(x) abs(x) + 1e-8
#define sunSize 32.32*pi/180.0
#define distToSun 14.7620

vec3 totalCoeff = mieCoeff + rayleighCoeff;
float heightScale = 0.5;

vec3 scatter(vec3 coeff, float depth) {
	return coeff * depth;
}

vec3 absorb(vec3 coeff, float depth) {
	return exp2(scatter(coeff, -depth));
}

float calcParticleThickness(float depth) {
	depth = depth * 2.0;
	depth = max(depth + 0.01, 0.01);
	depth = 1.0 / depth;

	return 100000. * depth;
}

float rayleighPhase(vec3 p, vec3 lp) {
	return 0.375 * (1.0 + pow(dot(p, lp), 2.0));
}

float miePhase(vec3 p, vec3 lp, float depth) {
	float g = exp2(-1e-6 * depth);
	float g2 = pow(g, 2.0);
	return 0.25 * ((1.0 - g2) * pow(1.0 + g2 - 2.0*g*dot(p, lp), -1.5));
}

vec3 calcAtmosphericScatter(vec3 p, vec3 lp) {
	const float ln2 = log(2.0);

	float opticalDepth = calcParticleThickness(p.y);
	float opticalDepthLight = calcParticleThickness(lp.y);

	vec3 scatterView = scatter(totalCoeff, opticalDepth);
	vec3 absorbView = absorb(totalCoeff, opticalDepth);

	vec3 scatterLight = scatter(totalCoeff, opticalDepthLight);
	vec3 absorbLight = absorb(totalCoeff, opticalDepthLight);

	vec3 absorbSun = abs(absorbLight - absorbView) / d0((scatterLight - scatterView) * ln2);
	vec3 rayleighScatter = scatter(rayleighCoeff, opticalDepth) * rayleighPhase(p, lp);
	vec3 mieScatter = scatter(mieCoeff, opticalDepth) * miePhase(p, lp, opticalDepth);
	vec3 scatterSun = rayleighScatter + mieScatter;

	vec3 sunSpot = smoothstep(sunSize+0.1, sunSize, distance(p, lp)*distToSun) * absorbView * (pi * 2.0);

	return (scatterSun * absorbSun + sunSpot) * pi;
}

vec3 ACESFilm(vec3 x) {
	float a = 2.51;
	float b = 0.03;
	float c = 2.43;
	float d = 0.59;
	float e = 0.14;
	return clamp((x*(a*x + b)) / (x*(c*x + d) + e), 0.0, 1.0);
}



vec3 rand3D(vec3  a, float level){
	vec3 p = vec3(dot(a,vec3(127.1,311.7,269.1)), dot(a,vec3(269.5,183.3,136.6)), dot(a,vec3(152.6,237.4,174.9)));
	vec3 random = fract(sin(p)*43758.5453);
	return (a+(random*level))-(level/2.);
}

vec2 ParallaxMapping(sampler2D depthMap, vec2 texCoords, vec3 viewDir){ 
	// number of depth layers
	const float minLayers = 8.;
	const float maxLayers = 12.;
	float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));  
	// calculate the size of each layer
	float layerDepth = 1.0 / numLayers;
	// depth of current layer
	float currentLayerDepth = 0.0;
	// the amount to shift the texture coordinates per layer (from vector P)
	vec2 P = viewDir.xy / viewDir.z * heightScale; 
	vec2 deltaTexCoords = P / numLayers;

	// get initial values
	vec2  currentTexCoords     = texCoords;
	float currentDepthMapValue = texture(depthMap, currentTexCoords).r;

	while(currentLayerDepth < currentDepthMapValue){
		// shift texture coordinates along direction of P
		currentTexCoords -= deltaTexCoords;
		// get depthmap value at current texture coordinates
		currentDepthMapValue = texture(depthMap, currentTexCoords).r;  
		// get depth of next layer
		currentLayerDepth += layerDepth;  
	}

	// get texture coordinates before collision (reverse operations)
	vec2 prevTexCoords = currentTexCoords + deltaTexCoords;

	// get depth after and before collision for linear interpolation
	float afterDepth  = currentDepthMapValue - currentLayerDepth;
	float beforeDepth = texture(depthMap, prevTexCoords).r - currentLayerDepth + layerDepth;

	// interpolation of texture coordinates
	float weight = afterDepth / (afterDepth - beforeDepth);
	vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);

	return finalTexCoords;
}

vec2 GetGradient(vec2 intPos, float t) {

	// Uncomment for calculated rand
	float rand = fract(sin(dot(intPos, vec2(12.9898, 78.233))) * 43758.5453);;

	// Texture-based rand (a bit faster on my GPU)
	//float rand = texture(TEXTURE_NOISE, intPos / 64.0).r;

	// Rotate gradient: random starting rotation, random rotation rate
	float angle = 6.283185 * rand + 4.0 * t * rand;
	return vec2(cos(angle), sin(angle));
}

float Pseudo3dNoise(vec3 pos) {
	vec2 i = floor(pos.xy);
	vec2 f = pos.xy - i;
	vec2 blend = f * f * (3.0 - 2.0 * f);
	float noiseVal = mix(
						mix(
							dot(GetGradient(i + vec2(0., 0.), pos.z), f - vec2(0., 0.)),
							dot(GetGradient(i + vec2(1., 0.), pos.z), f - vec2(1., 0.)),
							blend.x),
						mix(
							dot(GetGradient(i + vec2(0., 1.), pos.z), f - vec2(0., 1.)),
							dot(GetGradient(i + vec2(1., 1.), pos.z), f - vec2(1., 1.)),
							blend.x),
						blend.y
					 );
	return (noiseVal / 0.7);
}

#define SHADOW_COLOR vec3(0.25098039215, 0.61176470588, 1.0)

void main() {
	vec3 color = vec3(0.0);
	vec3 sunDirection = normalize(SUN_DIR);
	vec3 pos = normalize(position.xyz);

	#if USE_SKYBOX == 1
		float epsilon = 0.000001;
		color = calcAtmosphericScatter(pos-epsilon*2.0, sunDirection+epsilon);
		color = ACESFilm(color);
	#else
		color = mix(SHADOW_COLOR*0.125, SHADOW_COLOR, sunDirection.y);
		color.r += pow(1.0-abs(sunDirection.y),8.)-0.008;
		color.rgb /= color.r*2.;
	#endif

	color += pow(clamp(texture(TEXTURE_SKYNIGHT, normalize(vec4(vec4(position.xy,-position.z,position.w)*SHADOW_ROTATION_MATRIX).xyz)).rgb, 0., 0.89), vec3(3.5)+(color.rgb*40.));

	if(position.y > 0.){
		float cloudSize = 5.0; //Lower value => Overcast; Higher value => Clear
		float shadowStep = 3.;
		bool dynamicCloud = false;

		#if USE_CLOUD == 1

			vec3 cloudColor = vec3(0.);
			vec2 layerUV = (pos.xz/4.)/(pos.y);
			float cloudNoise = 0.5 + 0.25 * Pseudo3dNoise(vec3(layerUV * 9.0, TIME*0.25));

			float cloud = 0.0;
			if(dynamicCloud){
				cloudSize += 1.;
				cloud = pow(cloudNoise+0.18, cloudSize);
			} else {
				cloud = pow(texture(TEXTURE_NOISE, layerUV).r, cloudSize);
			}

			float cloudShadow = 0.;
			for(float shd=1.; shd<=shadowStep+1.; shd++){
				vec2 newUV = layerUV-((sunDirection.xz*shd)/128.);
				float noiseVal = 0.5 + 0.25 * Pseudo3dNoise(vec3(newUV * 9.0, TIME*0.25));

				if(dynamicCloud){
					cloudShadow += pow(noiseVal+0.18, cloudSize);
				} else {
					cloudShadow += pow(texture(TEXTURE_NOISE, newUV).r, cloudSize);
				}

			}
			cloudShadow = cloudShadow/(shadowStep+1.);
			cloudColor = mix(vec3(0.4)*clamp(sunDirection.y, 0.5, 1.), vec3(1.25, 1.125, 1.125)*clamp(pow(sunDirection.y,1.7), 0.5, 0.7), mix(cloudShadow, 1.0, sunDirection.y));

			color.rgb = mix(color.rgb, cloudColor*texture(TEXTURE_TEMPCOLOR, vec2(clamp(pow(1.-sunDirection.y,1.7),0.25,0.65),0.0)).rgb, mix(0., cloud, clamp(pow(position.y,0.5), 0., 1.)));

		#else
		#if USE_CLOUD == 2

			cloudSize = 1.2;
			float step = 0.00012;
			float maxLayer = 32.;

			float cloud = 0.;
			vec3 cloudColor = vec3(0.);

			float i;
			for(i=1.0; i<=maxLayer; i++){
				float j = 1.+(i*step);
				float height = i/maxLayer;
				vec2 layerUV = (pos.xz/4.)/(pos.y*j);
				float noiseVal = 0.5 + 0.25 * Pseudo3dNoise(vec3(layerUV * 9.0, i+TIME*1.));
				cloud += pow(noiseVal+0.18, mix(1., cloudSize, abs((height*2.0)-1.)));
				float cloudShadow = 0.;
				for(float shd=1.; shd<=shadowStep+1.; shd++){
					vec2 newUV = layerUV-((sunDirection.xz*shd)/128.);
					float noiseVal = 0.5 + 0.25 * Pseudo3dNoise(vec3(newUV * 9.0, i+TIME*1.));
					cloudShadow += pow(noiseVal+0.18, mix(1., cloudSize, abs((height*2.0)-1.)));
				}
				cloudShadow = cloudShadow/(shadowStep+1.);
				cloudColor += mix(vec3(0.,0.0125,0.2), vec3(1.), mix(cloudShadow, 1., sunDirection.y*(1.-height)));
			}
			cloud /= maxLayer;
			cloudColor /= maxLayer;
			color.rgb = mix(color.rgb, cloudColor, mix(0., cloud, clamp(pow(position.y,0.5), 0., 1.)));

		#endif
		#endif
	}

	FragColor = vec4(color, 1.0);
}