#version 330 core

precision highp float;

layout (location = 0) in vec3 POSITION;
layout (location = 1) in vec2 TEXCOORD;
layout (location = 2) in vec3 NORMAL;
layout (location = 3) in vec3 TANGENT;
layout (location = 4) in vec3 BITANGENT;

layout (location = 5) in vec3 I_TRANSLATION;
layout (location = 6) in vec3 I_ROTATION;
layout (location = 7) in vec3 I_SCALE;

uniform mat4 MODEL_MATRIX;
uniform mat4 MVP_MATRIX;
uniform mat4 SHADOW_MVP_MATRIX;
uniform vec3 SUN_DIR;
uniform vec4 VIEW_POSITION;
uniform mat4 NORMAL_MATRIX;

uniform float INSTANCED;

out vec2 uv;
out vec4 position;
out vec4 vPos;
out vec4 shadowView;
out vec3 dNormal;

out vec3 shadowViewPosition;
out vec3 viewPosition;

out vec3 tangentShadowViewPosition;
out vec3 tangentPosition;
out vec3 tangentViewPosition;

mat3 calculateRotation(vec3 rotation) {
	mat3 rotationX = mat3(
		1.0, 0.0, 0.0,
		0.0, cos(rotation.x), -sin(rotation.x),
		0.0, sin(rotation.x), cos(rotation.x)
	);
	mat3 rotationY = mat3(
		cos(rotation.y), 0.0, sin(rotation.y),
		0.0, 1.0, 0.0,
		-sin(rotation.y), 0.0, cos(rotation.y)
	);
	mat3 rotationZ = mat3(
		cos(rotation.z), -sin(rotation.z), 0.0,
		sin(rotation.z), cos(rotation.z), 0.0,
		0.0, 0.0, 1.0
	);
	return rotationZ * rotationY * rotationX;
}

void main() {
	vec4 pos;

	shadowViewPosition = SUN_DIR;
	viewPosition = VIEW_POSITION.xyz;
	vec3 vNormal = normalize(NORMAL);

	if(INSTANCED == 1.0) {
		mat3 rotation_mat = calculateRotation(I_ROTATION*0.01745329251994329576923690768489);
		dNormal = rotation_mat * vNormal;
		pos = vec4(POSITION, 1.0);
		pos.xyz *= I_SCALE;
		pos.xyz = rotation_mat * pos.xyz;
		pos.xyz += I_TRANSLATION;
	} else {
		dNormal = mat3(NORMAL_MATRIX) * vNormal;
		pos = MODEL_MATRIX*vec4(POSITION, 1.0);
	}

//	float rad = 10000.0;
//	float a = rad*sqrt(1-pow((VIEW_POSITION.x-pos.x)/rad,2.0)-pow((VIEW_POSITION.z-pos.z)/rad,2.0))-rad;
//	pos.xyz = vec3(pos.x, pos.y+a, pos.z);

	vec4 gPos = MVP_MATRIX*pos;
	shadowView = SHADOW_MVP_MATRIX*pos;

	uv = TEXCOORD;
	position = pos;
	vPos = gPos;

	vec3 T = normalize(mat3(MODEL_MATRIX) * normalize(TANGENT));
	vec3 B = normalize(mat3(MODEL_MATRIX) * normalize(BITANGENT));
	vec3 N = normalize(mat3(MODEL_MATRIX) * normalize(NORMAL));
	mat3 TBN = transpose(mat3(T, B, N));

	tangentShadowViewPosition = TBN * (SUN_DIR);
	tangentPosition = TBN * pos.xyz;
	tangentViewPosition = TBN * VIEW_POSITION.xyz;

	gl_Position = gPos;
}