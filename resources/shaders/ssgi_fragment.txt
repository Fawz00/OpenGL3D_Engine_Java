#version 330 core

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_COLOR;
uniform sampler2D TEXTURE_NORMAL;
uniform sampler2D TEXTURE_DEPTH;
uniform sampler2D TEXTURE_LIGHT;

uniform mat4 MVP_MATRIX;
uniform vec4 VIEW_POSITION;
uniform vec2 RESOLUTION;
uniform float TIME;
uniform int FRAME;
uniform float FOV;
uniform float DRAW_DISTANCE;
uniform float SSGI_DENSITY;

in vec2 uv;
out vec4 FragColor;

//Source: https://www.shadertoy.com/view/fddfDX

//Screen Space GI pass
//
//Heavily Modified/Simplied/Partially re-written version of SSGI by Alexander Sannikov from "Legit Engine"
//
//Alexander Sannikov
//MIT License
//https://github.com/Raikiri/LegitEngine
//

#define BOUNCE
const float absorbtion = 0.3;

const float pi = 3.14159265f;

//Sample directions controls noise
const int sampleDirs = 6;

const float ambientLightAmount = 0.001;
const float edgeFadeWidth = 0.1;

vec3 fragCamPos = vec3(0);

vec4 worldPos(vec2 texcoord, float depth){
    mat4 invMVP = inverse(MVP_MATRIX);
    float pxDepth = depth * 2.0 - 1.0;
    vec4 clipSpacePos =  vec4(texcoord*2.0-1.0, pxDepth, 1.0);
    vec4 worldPos = invMVP*clipSpacePos;
    worldPos = vec4((worldPos.xyz/worldPos.w), 1.0);
    return worldPos;
}

mat3 getCamMatrix(vec3 ro, vec3 look) {
    vec3 f = normalize(ro - look);
    vec3 r = normalize(cross(vec3(0.0, 1.0, 0.0), f)); 
    return mat3(-r, normalize(cross(f, r)), -f);
}

vec3 screenToWorld(vec3 screenPos) {
  screenPos.xy -= 0.5;
  screenPos.xy /= vec2(RESOLUTION.y / RESOLUTION.x, 1);
  vec3 ro = fragCamPos;
  mat3 camMat = getCamMatrix(ro,vec3(0.0));
  vec3 rd = camMat*normalize(vec3(screenPos.xy , 1./FOV)); 
  return ro + screenPos.z*rd;
}

float HorizonContribution(vec3 rayDir, vec3 worldTangent, vec3 viewNorm, float minAngle, float maxAngle){
    minAngle *= 2.0; 
    maxAngle *= 2.0;
    return 0.25 * (dot(rayDir, viewNorm) * (-cos(maxAngle) + cos(minAngle)) + dot(worldTangent, viewNorm) * (maxAngle - minAngle - sin(maxAngle) + sin(minAngle)));
}

float linstep(float a, float b, float x){
    return clamp((x - a)/(b - a), 0., 1.); 
}

vec3 getColor() {
    return texture(TEXTURE_COLOR, uv).rgb;
    //return vec3(1.0);
}

//Blackle hash (CC0) 
#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)
float hash(vec2 p) {
  int x = FK(p.x); int y = FK(p.y);
  return float((x-y*y)*(x*x+y)-x)/2.14e9;
}

void main() {
    vec3 test = vec3(0.0);
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);

    vec3 fragNorm  = texture(TEXTURE_NORMAL, uv).xyz;
    float fragDepth = texture(TEXTURE_DEPTH, uv, 1.0).g;
    
    fragCamPos = VIEW_POSITION.xyz;
    vec3 fragWorldPos = screenToWorld(vec3(uv, fragDepth));
    vec3 rayDir = normalize(fragCamPos - fragWorldPos);

    //Random rotation and linear jitter for all directions per pixel
    //TODO: try using some low discrepancy noise/sequence
    float seed = mod(float(FRAME),10.0); //hack to get temporally stable result
    float angleOffset = hash(uv+seed) * pi * 2.0;
    float linearOffset = hash(uv+angleOffset);

    float exponentialDensity = 1.0 / SSGI_DENSITY;
    float maxPixelDist = max(RESOLUTION.x, RESOLUTION.y);

    vec3 indirectLight = vec3(0);
    vec3 ambientLight = vec3(0);

    //Sample from multiple linear screenspace directions
    for(int dirIndex = 0; dirIndex < sampleDirs; dirIndex++)
    {
        //get direction vector for samples in this direction 
        float dirAngle = 2.0 * pi / float(sampleDirs) * (float(dirIndex) + angleOffset);
        vec2 dirVector = vec2(cos(dirAngle), sin(dirAngle));
        
        //offset world pos to get tangent vector
        vec3 offsetWorldPos = screenToWorld(vec3((gl_FragCoord.xy + dirVector) / RESOLUTION.xy, fragDepth));
        vec3 worldTangent = normalize(rayDir + normalize(offsetWorldPos - fragCamPos));
        
        //Get 2d normal in the plane of the current direction
        vec3 dirNormalPos = cross(-cross(worldTangent, rayDir), fragNorm);
        
        //Initial direction of horizon angle
        vec2 projFront = vec2(dot(rayDir, dirNormalPos), dot(worldTangent, dirNormalPos));
        
        //ititalize max horizon angle
        float maxAngle = atan(projFront.y, projFront.x);
        
        vec3 dirLight = vec3(0.0);
        vec3 dirAmbient = ambientLightAmount * HorizonContribution(rayDir, worldTangent, fragNorm, 0.0, maxAngle) * getColor() * vec3(1.0);
        
        float sampleCount = (log(maxPixelDist)/log(exponentialDensity)) + 2.0;
        
        //Sample a series of points in the stright screenspace line
        for(float sampleIndex = 0.0; sampleIndex < sampleCount; sampleIndex++)
        {
            //Move offset along the direction with exponential sampling pattern to get
            //screen space sample position
            float pixelOffset = pow(exponentialDensity, sampleIndex + linearOffset);
            pixelOffset = max(pixelOffset,sampleIndex*2.+1.);
            //pixelOffset = float(sampleIndex)*7.+1. + linearOffset;
            vec2 sampleUV = (gl_FragCoord.xy + dirVector * pixelOffset) / RESOLUTION.xy;
            
            //If sample is offscreen then stop sampling this direction
            if(max(sampleUV.x, sampleUV.y) > 1.0 || min(sampleUV.x, sampleUV.y) < 0.0)break;

            //Calculate "edgeFade" to reduce intensity of light near edge of screen (avoids distracting popping)
            vec2 d = abs(sampleUV - 0.5);
            float mult = max(d.x, d.y);
            float edgeFade = linstep(0.5, 0.5 - max(edgeFadeWidth,0.01), mult);
            
            //Sample depth and get sample horizon angle
            float sampleDepth = textureLod(TEXTURE_DEPTH, sampleUV.xy, 1.0).g;

            vec3 sampleWorldPos = fragCamPos + normalize(screenToWorld(vec3(sampleUV, 1.0)) - fragCamPos) * sampleDepth;
            vec3 worldDir = normalize(sampleWorldPos - fragWorldPos);
            vec2 projTangetDir = vec2(dot(rayDir, worldDir), dot(worldTangent, worldDir));
            float sampleAngle = atan(projTangetDir.y, projTangetDir.x);

            //If sampled world space position is visible then find its contribution
            if(sampleAngle < maxAngle)
            {
                //Get direct lighting (sampling in higher mip to greatly improve perf, could be dynamic)
                vec3 directLight = clamp(textureLod(TEXTURE_LIGHT, sampleUV.xy, 3.0).rgb-0.1, 0.0, 1.0)*110.0;

                
                //Optionaly include indirect lighting from previous frame to approximate multiple bounces
                float absorb = 0.0;
                #ifdef BOUNCE
                    absorb = absorbtion;
                    directLight += edgeFade * max(absorb * textureLod(TEXTURE_0, sampleUV.xy, 3.0), 0.0).rgb;
                #endif 
                float sampleContribution = (1.0 - absorb) * edgeFade * HorizonContribution(rayDir, worldTangent, fragNorm, sampleAngle, maxAngle);
                maxAngle = sampleAngle;
                
                //Add to indirect lighting and subtract from ambient
                dirLight += directLight * sampleContribution * getColor() * (1.0-min(distance(sampleDepth, fragDepth)/48.0, 1.0));
                dirAmbient -= ambientLightAmount * sampleContribution;
            }
        }
        indirectLight += (dirLight) / float(sampleDirs) * 2.0;
        ambientLight += (dirAmbient) / float(sampleDirs) * 2.0;
    }

    //Combining ambient light with indirect light for simplicity but they could be kept seperate
    //for more accuracy 
    indirectLight+=vec3(ambientLight);
    
    color.rgb = indirectLight;

    //Accumulate a few past frames
    //This should probably use temporal reprojection but not enough buffers
    
    color.rgb = mix(texture(TEXTURE_0,uv).rgb, indirectLight, 0.3);

//test.r = vec4(MVP_MATRIX*vec4(fragWorldPos,1.0)).z/50.0;
//test.g = textureLod(TEXTURE_DEPTH, uv.xy, 1.0).g/100.0;
	FragColor = vec4(color.rgb, 1.0);
}