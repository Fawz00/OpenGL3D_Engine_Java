#version 330 core

precision highp float;

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_DEPTH;
uniform sampler2D TEXTURE_NORMAL;

uniform mat4 ROTATION_MATRIX;
uniform mat4 PROJECTION_MATRIX;
uniform mat4 VIEW_MATRIX;
uniform mat4 MVP_MATRIX;
uniform vec4 VIEW_POSITION;
uniform vec2 RESOLUTION;
uniform float TIME;
uniform float NEAR_DISTANCE;
uniform float FAR_DISTANCE;

in vec2 uv;

out vec4 FragColor;

const float step = 0.1;
const float minRayStep = 0.1;
const float maxSteps = 30;
const int numBinarySearchSteps = 5;
const float reflectionSpecularFalloffExponent = 3.0;

#define Scale vec3(.8, .8, .8)
#define K 19.19

vec4 getWorldPosition(float depth, vec2 uv) {
	vec4 clipSpacePosition = vec4(vec3(uv,depth)*2.0-1.0, 1.0);
	vec4 worldPosition = inverse(MVP_MATRIX)*clipSpacePosition;
	worldPosition = vec4(worldPosition.xyz/worldPosition.w, 1.0);
	return worldPosition;
}

vec3 CalcViewPosition(in vec2 TexCoord) {
	// Combine UV & depth into XY & Z (NDC)
	vec3 rawPosition = vec3(TexCoord, texture(TEXTURE_DEPTH, TexCoord).r);

	// Convert from (0, 1) range to (-1, 1)
	vec4 ScreenSpacePosition = vec4( rawPosition * 2 - 1, 1);

	// Undo Perspective transformation to bring into view space
	vec4 ViewPosition = inverse(PROJECTION_MATRIX) * ScreenSpacePosition;

	// Perform perspective divide and return
	return ViewPosition.xyz / ViewPosition.w;
}
vec3 PositionFromDepth(float depth, vec2 uv) {
	float z = depth * 2.0 - 1.0;

	vec4 clipSpacePosition = vec4(uv * 2.0 - 1.0, z, 1.0);
	vec4 viewSpacePosition = inverse(PROJECTION_MATRIX) * clipSpacePosition;

	// Perspective division
	viewSpacePosition /= viewSpacePosition.w;

	return viewSpacePosition.xyz;
}
vec3 BinarySearch(inout vec3 dir, inout vec3 hitCoord, inout float dDepth) {
	float depth;
	vec4 projectedCoord;

	for(int i = 0; i < numBinarySearchSteps; i++){
		projectedCoord = PROJECTION_MATRIX * vec4(hitCoord, 1.0);
		projectedCoord.xy /= projectedCoord.w;
		projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;

		depth = vec4( MVP_MATRIX*getWorldPosition(texture(TEXTURE_DEPTH, projectedCoord.xy).r, projectedCoord.xy) ).z;

		dDepth = hitCoord.z - depth;

		dir *= 0.5;
		if(dDepth > 0.0)
			hitCoord += dir;
		else
			hitCoord -= dir;    
	}

	projectedCoord = PROJECTION_MATRIX * vec4(hitCoord, 1.0);
	projectedCoord.xy /= projectedCoord.w;
	projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;

	return vec3(projectedCoord.xy, depth);
}
vec4 RayMarch(vec3 dir, inout vec3 hitCoord, out float dDepth) {
	dir *= step;
	float depth;
	int steps;
	vec4 projectedCoord;

	for(int i = 0; i < maxSteps; i++)
	{
		hitCoord += dir;

		projectedCoord = PROJECTION_MATRIX * vec4(hitCoord, 1.0);
		projectedCoord.xy /= projectedCoord.w;
		projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;

		depth = vec4( MVP_MATRIX*getWorldPosition(texture(TEXTURE_DEPTH, projectedCoord.xy).r, projectedCoord.xy) ).z;
		if(depth > 1000.0)
			continue;

		dDepth = hitCoord.z - depth;

		if((dir.z - dDepth) < 1.2)
		{
			if(dDepth <= 0.0)
			{
				vec4 Result;
				Result = vec4(BinarySearch(dir, hitCoord, dDepth), 1.0);

				return Result;
			}
		}
		
		steps++;
	}
	return vec4(projectedCoord.xy, depth, 0.0);
}
vec3 fresnelSchlick(float cosTheta, vec3 F0) {
	return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}


vec3 hash(vec3 a) {
	a = fract(a * Scale);
	a += dot(a, a.yxz + K);
	return fract((a.xxy + a.yxx)*a.zyx);
}

void main() {
	vec4 color = texture(TEXTURE_0, uv);
	vec4 position = getWorldPosition(texture(TEXTURE_DEPTH, uv).r, uv);
	vec3 view = vec4( MVP_MATRIX * position ).xyz;
	view = CalcViewPosition(uv);
	vec3 viewNormal = vec4((texture(TEXTURE_NORMAL, uv) * 2.0 - 1.0)*inverse(ROTATION_MATRIX)).xyz;

	vec4 ex = color;

	// GAMMA
	float gamma = 1.5;
	color.rgb = pow(color.rgb, vec3(1.0/gamma));

	// SCREEN SPACE REFLECTION
	float Metallic = 0.4f;
	float spec = 0.2f;

	vec3 F0 = vec3(0.04); 
	F0 = mix(F0, color.rgb, Metallic);
	vec3 Fresnel = fresnelSchlick(max(dot(normalize(viewNormal), normalize(view.xyz)), 0.0), F0);

	vec3 reflected = normalize(reflect(normalize(view.xyz), normalize(viewNormal)));

	vec3 hitPos = view.xyz;
	float dDepth;

	vec3 wp = vec3(vec4(view.xyz, 1.0) * inverse(ROTATION_MATRIX));
	vec3 jitt = mix(vec3(0.0), vec3(hash(wp)), spec);
	vec4 coords = RayMarch((vec3(jitt) + reflected * max(minRayStep, -view.z)), hitPos, dDepth);

	vec2 dCoords = smoothstep(0.2, 0.6, abs(vec2(0.5, 0.5) - coords.xy));

	float screenEdgefactor = clamp(1.0 - (dCoords.x + dCoords.y), 0.0, 1.0);

	float ReflectionMultiplier = pow(Metallic, reflectionSpecularFalloffExponent) * 
		screenEdgefactor * 
		-reflected.z;

	// Get color
	vec3 SSR = texture(TEXTURE_0, coords.xy).rgb;// * clamp(ReflectionMultiplier, 0.0, 0.9) * Fresnel;  
	color.rgb = SSR;



	FragColor = color;
}