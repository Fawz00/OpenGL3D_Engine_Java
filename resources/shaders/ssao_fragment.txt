#version 330 core

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_NOISE;
uniform sampler2D TEXTURE_NORMAL;
uniform sampler2D TEXTURE_DEPTH;
uniform sampler2D TEXTURE_LIGHT;

uniform mat4 MVP_MATRIX;
uniform mat4 PROJECTION_MATRIX;
uniform vec2 RESOLUTION;
uniform int sampleCount;
uniform vec3 samples[64];

in vec2 uv;
out vec4 FragColor;

//Source: https://learnopengl.com/Advanced-Lighting/SSAO

vec4 clipSpacePos(vec2 texcoord, float depth){
    float pxDepth = depth * 2.0 - 1.0;
    vec4 clipSpacePos =  vec4(texcoord*2.0-1.0, pxDepth, 1.0);
    return clipSpacePos;
}
vec4 worldPos(vec2 texcoord, float depth){
    mat4 invMVP = inverse(MVP_MATRIX);
    float pxDepth = depth * 2.0 - 1.0;
    vec4 clipSpacePos =  vec4(texcoord*2.0-1.0, pxDepth, 1.0);
    vec4 worldPos = invMVP*clipSpacePos;
    worldPos = vec4((worldPos.xyz/worldPos.w), 1.0);
    return worldPos;
}

int kernelSize = sampleCount;
float radius = 2.0;
float bias = 0.05;



void main() {
	vec4 test = vec4(0.0, 0.0, 0.0, 1.0);

    // tile noise texture over screen based on screen dimensions divided by noise size
    vec2 noiseScale = vec2(RESOLUTION.x/4.0, RESOLUTION.y/4.0);

    // get input for SSAO algorithm
    float depth = texture(TEXTURE_DEPTH, uv).r;
    vec3 fragPos = vec4(inverse(PROJECTION_MATRIX) * MVP_MATRIX * worldPos(uv, depth)).xyz;
    vec3 normal = normalize(texture(TEXTURE_NORMAL, uv).rgb*2.0-1.0);
    vec3 randomVec = normalize(texture(TEXTURE_NOISE, uv * noiseScale).xyz);
    // create TBN change-of-basis matrix: from tangent-space to view-space
    vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
    vec3 bitangent = cross(normal, tangent);
    mat3 TBN = mat3(tangent, bitangent, normal);

    // iterate over the sample kernel and calculate occlusion factor
    float occlusion = 0.0;
    for(int i = 0; i < kernelSize; ++i)
    {
        // get sample position
        vec3 samplePos = TBN * samples[i]; // from tangent to view-space
        samplePos = fragPos + samplePos * radius;

        // project sample position (to sample texture) (to get position on screen/texture)
        vec4 offset = vec4(samplePos, 1.0);
        offset = PROJECTION_MATRIX * offset; // from view to clip-space
        offset.xyz /= offset.w; // perspective divide
        offset.xyz = offset.xyz * 0.5 + 0.5; // transform to range 0.0 - 1.0

        // get sample depth
        float sampleDepth = -texture(TEXTURE_DEPTH, offset.xy).g; // get depth value of kernel sample

        // range check & accumulate
        float rangeCheck = smoothstep(0.0, 1.0, radius / abs(fragPos.z - sampleDepth));
        occlusion += (sampleDepth >= samplePos.z + bias*(-samplePos.z/3.0) ? 1.0 : 0.0) * rangeCheck;           
    }
    occlusion = 1.0 - (occlusion / kernelSize);

	FragColor = vec4(vec3(  clamp(occlusion*1.1, 0.0, 1.0)  ),1.0);
}